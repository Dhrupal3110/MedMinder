import React, { useState, useRef } from 'react';

export interface ExampleContainerProps {
  title: string;
  description?: string;
  code: string;
  children: React.ReactNode;
  style?: React.CSSProperties;
}

export const ExampleContainer: React.FC<ExampleContainerProps> = ({
  title,
  description,
  code,
  children,
  style = { display: 'flex', flexWrap: 'wrap', alignItems: 'center', gap: '16px' },
}) => {
  const [copyStatus, setCopyStatus] = useState('');
  const codeRef = useRef(null);

  const handleCopyCode = () => {
    if (codeRef.current) {
      try {
        const textToCopy = codeRef.current.innerText;
        // Use a temporary textarea to copy text to clipboard
        const textarea = document.createElement('textarea');
        textarea.value = textToCopy;
        document.body.appendChild(textarea);
        textarea.select();
        document.execCommand('copy'); // Fallback for navigator.clipboard
        document.body.removeChild(textarea);
        setCopyStatus('Copied!');
      } catch (err) {
        setCopyStatus('Failed to copy!');
        console.error('Failed to copy text: ', err);
      }
      setTimeout(() => setCopyStatus(''), 2000); // Clear status after 2 seconds
    }
  };

  return (
    <div className='example-container'>
      <h3 className='example-title'>{title}</h3>
      {description && <p className='example-description'>{description}</p>}

      <div className='example-demo-wrapper'>
        <div className='example-demo' style={style}>
          {children}
        </div>
      </div>

      <div className='example-code-wrapper'>
        <div className='example-code-header'>
          <span>Code</span>
          <button className='copy-button' onClick={handleCopyCode} title="Copy code">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-copy"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2v2"/></svg>
            {copyStatus && <span className="copy-status">{copyStatus}</span>}
          </button>
        </div>
        <pre ref={codeRef} className='example-code-block'>
          <code>{code}</code>
        </pre>
      </div>
    </div>
  );
};
